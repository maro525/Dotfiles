call plug#begin('~/.local/share/nvim/plugged')

" syntax
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tikhomirov/vim-glsl'

" whitespace
Plug 'ntpeters/vim-better-whitespace'
" indent
Plug 'Yggdroot/indentLine'

" auto-pair
Plug 'jiangmiao/auto-pairs'

" style
Plug 'joshdick/onedark.vim'
Plug 'sickill/vim-monokai'
Plug 'jacoborus/tender.vim'
Plug 'junegunn/seoul256.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'morhetz/gruvbox'

" status line
Plug 'itchyny/lightline.vim'

" ranger
Plug 'kevinhwang91/rnvimr'

" tagbar
Plug 'preservim/tagbar'

" fzf
Plug 'junegunn/fzf', {'dir': '~/.fzf_bin', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'yuki-yano/fzf-preview.vim', { 'branch': 'release/rpc' }

" fern vim
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'antoinemadec/FixCursorHold.nvim'

" git
Plug 'airblade/vim-gitgutter'
Plug 'lambdalisue/gina.vim'

" key
Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'
Plug 'ctjhoa/spacevim'

" floating window
Plug 'voldikss/vim-floaterm'

" svelte
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'evanleck/vim-svelte', {'branch': 'main'}

call plug#end()

let g:python_host_prog = '/Users/hidemaro/.pyenv/shims/python2'
let g:python3_host_prog = '/usr/local/opt/python@3.8/bin/python3'

let mapleader = "\<SPACE>"

set number
set cursorline


set splitright

" 透明度
set pumblend=10

set clipboard=unnamed

set tabstop=4
set shiftwidth=4
set expandtab

set linespace=30

if has("autocmd")
  "ファイルタイプの検索を有効にする
  filetype plugin on
  "ファイルタイプに合わせたインデントを利用
  filetype indent on
  autocmd FileType js          setlocal sw=2 sts=2 ts=2 et
  autocmd FileType json        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType html        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType css         setlocal sw=2 sts=2 ts=2 et
  autocmd FileType scss        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType sass        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType javascript  setlocal sw=2 sts=2 ts=2 et
  autocmd FileType typescript  setlocal sw=2 sts=2 ts=2 et
  autocmd FileType typescriptreact  setlocal sw=2 sts=2 ts=2 et
  autocmd FileType javascriptreact  setlocal sw=2 sts=2 ts=2 et
endif


syntax on

set autoindent
set smartindent
set smarttab

set termguicolors
set background=dark

colorscheme onehalfdark

set ignorecase
set smartcase
set hlsearch
set incsearch

set list

set wrap

set showcmd
set wildmenu
set showmatch

" vim -gitgutter
" " g]で前の変更箇所へ移動する
nnoremap g[ :GitGutterPrevHunk<CR>
" g[で次の変更箇所へ移動する
nnoremap g] :GitGutterNextHunk<CR>
" ghでdiffをハイライトする
nnoremap gh :GitGutterLineHighlightsToggle<CR>
" gpでカーソル行のdiffを表示する
nnoremap gp :GitGutterPreviewHunk<CR>
" 記号の色を変更する
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=blue
highlight GitGutterDelete ctermfg=red

set updatetime=250

" to not conceal quotation mark
let g:indentLine_setConceal=0

let g:airline_theme='onehalfdark'
let g:lightline = {
  \'colorscheme': 'onehalfdark',
  \'active': {
    \'left': [
      \['mode', 'paste'],
      \['gitbranch', 'readonly', 'filename', 'modified', 'ale'],
    \],
  \},
  \'component_function': {
    \'gitbranch': 'FugitiveHead',
    \'ale': 'ALEGetStatusLine'
  \}
\}

" keybindings
nnoremap <Leader> <Nop>
xnoremap <Leader> <Nop>

inoremap fd <esc>
imap     jl <right>

fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files
  else
    :GFiles
  endif
endfun
nnoremap <C-k> :call FzfOmniFiles()<CR>

nnoremap ft :TagbarToggle<CR>
nnoremap fb :Buffers<CR>
nnoremap fl :BLines<CR>
nnoremap fh :History<CR>
nnoremap fc :Commits<CR>

" easymotion
let g:EasyMotion_do_mapping = 0

map  <Leader>  <Plug>(easymotion-prefix)
map  <Leader>k <Plug>(easymotion-bd-f)
nmap <Leader>k <Plug>(easymotion-overwin-f)
map  s         <Plug>(easymotion-bd-f2)
nmap s         <Plug>(easymotion-overwin-f2)
map  <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
map  <Leader>l <Plug>(easymotion-lineforward)
map  <Leader>h <Plug>(easymotion-linebackward)

let [dev] = ['m']

" lint
nnoremap [dev] <Nop>
xnoremap [dev] <Nop>
nmap m [dev]
xmap m [dev]

command! -nargs=0 Format :call CocAction('format')

inoremap <silent> <expr><C-Space> coc#refresh()
" show documentation on hover
nnoremap <silent> K               :<C-u>call <SID>show_documentation()<CR>
" all rename
nmap     <silent> [dev]rn         <Plug>(coc-rename)
" code action
nmap     <silent> [dev]a          <Plug>(coc-codeaction-selected)iw

nnoremap <silent> <C-h> :call CocAction('doHover')<CR>

let g:coc_global_extensions = ['coc-tsserver', 'coc-eslint8', 'coc-prettier', 'coc-git', 'coc-lists', 'coc-fzf-preview']

function! s:coc_typescript_settings() abort
  nnoremap <silent> <buffer> [dev]f :<C-u>CocCommand eslint.executeAutofix<CR>:CocCommand prettier.formatFile<CR>
endfunction

augroup coc_ts
  autocmd!
  autocmd FileType typescript,typescriptreact call <SID>coc_typescript_settings()
augroup END

function! s:show_documentation() abort
  if index(['vim','help'], &filetype) >= 0
    execute 'h ' . expand('<cword>')
  elseif coc#rpc#ready()
    call CocActionAsync('doHover')
  endif
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <C-c> coc#refresh()
inoremap <silent><expr> <TAB> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

command! -nargs=0 Organize   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)


" fzf-preview
let $BAT_THEME                     = 'gruvbox-dark'
let $FZF_PREVIEW_PREVIEW_BAT_THEME = 'gruvbox-dark'

nnoremap [ff]     <Nop>
xnoremap [ff]     <Nop>
nmap     q        [ff]
xmap     q        [ff]

nnoremap <silent> [ff]q  :<C-u>FzfPreviewFromResourcesRpc project_mru git<CR>
nnoremap <silent> [ff]g  :<C-u>CocCommand fzf-preview.GitStatus<CR>
nnoremap <silent> [ff]a  :<C-u>CocCommand fzf-preview.GitActions<CR>
nnoremap <silent> [ff]b  :<C-u>CocCommand fzf-preview.Buffers<CR>
nnoremap          [ff]f  :<C-u>CocCommand fzf-preview.ProjectGrep --add-fzf-arg=--exact --add-fzf-arg=--no-sort<Space>
xnoremap          [ff]f  "sy:CocCommand fzf-preview.ProjectGrep --add-fzf-arg=--exact --add-fzf-arg=--no-sort<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"

nnoremap <silent> [ff]l  :<C-u>CocCommand fzf-preview.CocCurrentDiagnostics<CR>
nnoremap <silent> [ff]rf :<C-u>CocCommand fzf-preview.CocReferences<CR>
nnoremap <silent> [ff]d  :<C-u>CocCommand fzf-preview.CocDefinition<CR>
nnoremap <silent> [ff]t  :<C-u>CocCommand fzf-preview.CocTypeDefinition<CR>
nnoremap <silent> [ff]o  :<C-u>CocCommand fzf-preview.CocOutline --add-fzf-arg=--exact --add-fzf-arg=--no-sort<CR>

"" fern
nnoremap <silent> <C-e> :<C-u>Fern . -reveal=% -drawer -toggle<CR>
nnoremap <silent> <Leader>E :<C-u>Fern . -drawer -reveal=%<CR>
let g:fern#renderer = "nerdfont"
let g:fern#default_hidden=1

" rnvimr
tnoremap <silent> <M-i> <C-\><C-n>:RnvimrResize<CR>
nnoremap <silent> <Leader>ro :RnvimrToggle<CR>
tnoremap <silent> <M-o> <C-\><C-n>:RnvimrToggle<CR>
let g:rnvimr_enable_ex = 1
let g:rnvimr_enable_picker = 1
let g:rnvimr_layout = {
            \ 'relative': 'editor',
            \ 'width': float2nr(round(1.0 * &columns)),
            \ 'height': float2nr(round(0.42 * &lines)),
            \ 'col': float2nr(round(0.0 * &columns)),
            \ 'row': float2nr(round(0.54 * &lines)),
            \ 'style': 'minimal'
            \ }

" floaterm
nnoremap    <Leader>to   :FloatermToggle<CR>
" noremap!    <Leader>t   <ESC>:FloatermToggle<CR>
tnoremap    <Leader>to   <C-\><C-n>:FloatermToggle<CR>

let g:floaterm_width = 100
let g:floaterm_winblend = 0

"" gruvbox
colorscheme gruvbox

" svelte
let g:svelte_indent_script = 0
let g:svelte_indent_style = 0
